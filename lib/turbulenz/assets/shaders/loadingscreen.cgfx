// Copyright (c) 2010-2013 Turbulenz Limited

float4 color;
float4 clipSpace;
float  alpha;
sampler2D diffuse = sampler_state
{
    MinFilter = Linear;
    MagFilter = Linear;
    WrapS = ClampToEdge;
    WrapT = ClampToEdge;
};
float4 vp_background(float4 Position : POSITION) : POSITION
{
   return Position;
}
float4 fp_background() : COLOR
{
   return float4(color.xyz, smoothstep(0.0, 1.0, color.w));
}
void vp_texture(in float4 InPosition : POSITION,
                in float2 InUV : TEXCOORD0,
                out float4 OutPosition: POSITION,
                out float2 OutUV: TEXCOORD0)
{
   OutPosition.xy = (InPosition.xy * clipSpace.xy) + clipSpace.zw;
   OutPosition.zw = InPosition.zw;
   OutUV = InUV;
}
float4 fp_texture(float2 uv : TEXCOORD0) : COLOR
{
   float4 textureColor = tex2D(diffuse, uv);
   textureColor.w *= smoothstep(0.0, 1.0, alpha);
   return textureColor;
}
technique background
{
    pass
    {
        DepthTestEnable = false;
        DepthMask       = false;
        CullFaceEnable  = false;
        BlendEnable     = true;
        BlendFunc       = int2(SrcAlpha, InvSrcAlpha);
        VertexProgram   = compile latest vp_background();
        FragmentProgram = compile latest fp_background();
    }
}
technique texture
{
    pass
    {
        DepthTestEnable = false;
        DepthMask       = false;
        CullFaceEnable  = false;
        BlendEnable     = true;
        BlendFunc       = int2(SrcAlpha, InvSrcAlpha);
        VertexProgram   = compile latest vp_texture();
        FragmentProgram = compile latest fp_texture();
    }
}
